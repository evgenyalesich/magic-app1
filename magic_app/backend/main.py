import logging
import time
import uuid
from pathlib import Path
from typing import Optional

from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.trustedhost import TrustedHostMiddleware

from backend.api.api import api_router
from backend.core.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_level_name = settings.LOG_LEVEL.upper()
numeric_level = getattr(logging, log_level_name, logging.INFO)
formatter = logging.Formatter(
    "%(asctime)s [%(levelname)s] %(name)s:%(lineno)d - %(funcName)s() - %(message)s"
)
logging.basicConfig(
    level=numeric_level,
    format="%(asctime)s [%(levelname)s] %(name)s:%(lineno)d - %(funcName)s() - %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger("backend")
middleware_logger = logging.getLogger("middleware")
cors_logger = logging.getLogger("cors")
security_logger = logging.getLogger("security")

logging.getLogger("uvicorn").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)

app = FastAPI(title="Magic App Backend")

# –î–æ–±–∞–≤–ª—è–µ–º TrustedHost middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
allowed_hosts = ["*"]
if hasattr(settings, 'ALLOWED_HOSTS') and settings.ALLOWED_HOSTS:
    allowed_hosts = settings.ALLOWED_HOSTS
app.add_middleware(TrustedHostMiddleware, allowed_hosts=allowed_hosts)

# –£–ª—É—á—à–µ–Ω–Ω—ã–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.middleware("http")
async def enhanced_logging_middleware(request: Request, call_next):
    request_id = str(uuid.uuid4())[:8]
    start_time = time.time()
    client_ip = request.client.host if request.client else "unknown"
    user_agent = request.headers.get("user-agent", "unknown")
    request.state.request_id = request_id
    middleware_logger.info("üîÑ [%s] START: %s %s | IP: %s | UA: %s", request_id, request.method, request.url.path, client_ip, user_agent[:100])
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        status_emoji, log_level = "‚úÖ", middleware_logger.info
        if response.status_code >= 500:
            status_emoji, log_level = "üí•", middleware_logger.error
        elif response.status_code >= 400:
            status_emoji, log_level = "‚ö†Ô∏è", middleware_logger.warning
        log_level("%s [%s] END: %s %s ‚Üí %s | %.3fs", status_emoji, request_id, request.method, request.url.path, response.status_code, process_time)
        response.headers["X-Request-ID"] = request_id
        response.headers["X-Process-Time"] = f"{process_time:.3f}"
        return response
    except Exception as e:
        process_time = time.time() - start_time
        middleware_logger.error("‚ùå [%s] ERROR: %s %s | Exception: %s | %.3fs | IP: %s", request_id, request.method, request.url.path, str(e), process_time, client_ip)
        middleware_logger.exception("üîç [%s] Full traceback for %s %s:", request_id, request.method, request.url.path)
        raise

# –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ Telegram –¥–ª—è CORS –∏ CSP
telegram_origins = [
    "https://web.telegram.org",
    "https://webk.telegram.org",
    "https://webz.telegram.org",
    "https://telegram.org",
    "https://core.telegram.org",
]

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@app.middleware("http")
async def security_monitoring_middleware(request: Request, call_next):
    client_ip = request.client.host if request.client else "unknown"
    user_agent = request.headers.get("user-agent", "")
    suspicious_paths = ["/admin", "/.env", "/wp-admin", "/phpmyadmin", "/config", "/.git", "/backup", "/test", "/debug", "/console", "/api/v1/admin", "/swagger", "/docs", "/redoc"]
    suspicious_user_agents = ["sqlmap", "nikto", "nmap", "masscan", "burp", "owasp"]
    if any(path in request.url.path.lower() for path in suspicious_paths):
        security_logger.warning("üö® SUSPICIOUS_PATH: %s requested %s %s", client_ip, request.method, request.url.path)
    if any(agent.lower() in user_agent.lower() for agent in suspicious_user_agents):
        security_logger.warning("üö® SUSPICIOUS_UA: %s with User-Agent: %s", client_ip, user_agent)

    response = await call_next(request)

    # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    response.headers["Referrer-Policy"] = "strict-origin-when-cross-origin"

    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–≥–∏–π X-Frame-Options –Ω–∞ –≥–∏–±–∫–∏–π Content-Security-Policy,
    # —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–ª–∏–µ–Ω—Ç–∞—Ö Telegram.
    allowed_ancestors = " ".join(["'self'"] + telegram_origins)
    response.headers["Content-Security-Policy"] = f"frame-ancestors {allowed_ancestors};"
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

    if request.url.path.startswith("/api"):
        response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
        response.headers["Pragma"] = "no-cache"
        response.headers["Expires"] = "0"

    return response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
# –ù–∞–¥–µ–∂–Ω–æ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å TypeError
frontend_origins = []
if hasattr(settings, 'FRONTEND_ORIGIN') and settings.FRONTEND_ORIGIN:
    origin_setting = settings.FRONTEND_ORIGIN
    if isinstance(origin_setting, list):
        frontend_origins = [str(o) for o in origin_setting if o]
    else:
        frontend_origins = [str(origin_setting)]

additional_origins = []
if hasattr(settings, 'ADDITIONAL_ORIGINS') and settings.ADDITIONAL_ORIGINS:
    if isinstance(settings.ADDITIONAL_ORIGINS, list):
        additional_origins = [str(o) for o in settings.ADDITIONAL_ORIGINS if o]
    else:
        additional_origins = [str(settings.ADDITIONAL_ORIGINS)]

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
all_origins = list(set(frontend_origins + telegram_origins + additional_origins))

# –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º localhost
if hasattr(settings, 'ENVIRONMENT') and settings.ENVIRONMENT == "development":
    development_origins = [
        "http://localhost:3000", "http://localhost:5173", "http://localhost:8080",
        "http://127.0.0.1:3000", "http://127.0.0.1:5173", "http://127.0.0.1:8080",
    ]
    all_origins.extend(development_origins)
    all_origins = list(set(all_origins)) # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—â–µ —Ä–∞–∑ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

cors_logger.info("üåê CORS configured for origins: %s", all_origins)

app.add_middleware(
    CORSMiddleware,
    allow_origins=all_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=[
        "X-Request-ID", "X-Process-Time", "X-RateLimit-Limit",
        "X-RateLimit-Remaining", "X-RateLimit-Reset",
    ],
    max_age=86400,
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç–µ—Ä
app.include_router(api_router, prefix="/api")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
current_file = Path(__file__).resolve()
root_dir = current_file.parents[2]
lib_dir = current_file.parents[1]
dist_candidates = [
    root_dir / "frontend" / "dist",
    lib_dir / "frontend" / "dist",
    root_dir / "dist",
    lib_dir / "dist",
]
dist_dir = next((p for p in dist_candidates if p.is_dir()), None)

if dist_dir:
    logger.info("üì¶ Front-end mounted from %s", dist_dir)
    app.mount("/assets", StaticFiles(directory=dist_dir / "assets", html=False), name="assets")
    @app.get("/{full_path:path}", include_in_schema=False)
    async def spa_fallback(request: Request, full_path: str):
        if request.method == "GET" and not request.url.path.startswith(("/api", "/assets")):
            index_file = dist_dir / "index.html"
            if not index_file.exists():
                logger.error("‚ùå index.html not found at %s", index_file)
                raise HTTPException(status_code=404, detail="Frontend not available")
            return FileResponse(index_file)
        raise HTTPException(status_code=404)
else:
    logger.warning("‚ùó dist –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Ñ—Ä–æ–Ω—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å—Å—è (–∏—Å–∫–∞–ª–∏ –≤ %s)", [str(p) for p in dist_candidates])

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π health check
@app.get("/health", include_in_schema=False)
async def health_check():
    health_status = {
        "status": "ok",
        "timestamp": time.time(),
        "frontend_available": dist_dir is not None,
        "log_level": log_level_name,
        "cors_origins_count": len(all_origins),
    }
    if dist_dir:
        health_status["frontend_path"] = str(dist_dir)
        health_status["index_html_exists"] = (dist_dir / "index.html").exists()
    return health_status

# Endpoint –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
@app.get("/cors-info", include_in_schema=False)
async def cors_info():
    if not (hasattr(settings, 'ENVIRONMENT') and settings.ENVIRONMENT == "development"):
        raise HTTPException(status_code=404)
    return {
        "allowed_origins": all_origins,
        "allowed_methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH", "HEAD"],
        "allow_credentials": True,
        "max_age": 86400,
    }

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    logger.info("üöÄ Starting Magic App Backend")
    logger.info("üìä Log level: %s", log_level_name)
    logger.info("üåê CORS origins: %d configured", len(all_origins))
    logger.info("üîí Security middleware: enabled")
    logger.info("üìÅ Frontend available: %s", "Yes" if dist_dir else "No")
    if dist_dir:
        logger.info("üì¶ Frontend path: %s", dist_dir)
    logger.info("‚úÖ Application started successfully")

@app.on_event("shutdown")
async def shutdown_event():
    logger.info("üõë Shutting down Magic App Backend")
    logger.info("‚úÖ Application stopped successfully")
