"""
Telegram Bot –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ó–µ—Ä–∫–∞–ª–æ –°—É–¥—å–±—ã"
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram Stars
"""
import asyncio
import json
import logging
import os
import sys
import time
import hmac
import hashlib
import uuid
from pathlib import Path
from typing import Optional, Dict, Any
from urllib.parse import urlencode, quote, unquote_plus

import httpx
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("bot.log", encoding="utf-8")
    ],
)
log = logging.getLogger(__name__)

# --- 1. –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø –ò –ò–• –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ---
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_BASE = os.getenv("BACKEND_API_BASE")
WEB_APP_URL = os.getenv("WEB_APP_URL")

log.info("--- [–ë–û–¢] –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---")
log.info("[–ë–û–¢] –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω: %s", TOKEN)
log.info("[–ë–û–¢] –ê–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞ (API_BASE): %s", API_BASE)
log.info("[–ë–û–¢] –ê–¥—Ä–µ—Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (WEB_APP_URL): %s", WEB_APP_URL)

if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
if not API_BASE:
    raise RuntimeError("BACKEND_API_BASE –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
if not WEB_APP_URL:
    raise RuntimeError("WEB_APP_URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
log.info("--- [–ë–û–¢] –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ---")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
BOT_DIR = Path(__file__).parent
PHOTO_PATH = BOT_DIR / "f1fb9a23-5f67-4679-96dc-a58601f62203.png"


# --- 2. –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –•–ï–®–ê –î–õ–Ø –û–¢–õ–ê–î–ö–ò ---
def make_tg_hash(data: dict[str, str | int]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç hash –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥ WebApp.
    –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û –° –ë–≠–ö–ï–ù–î–û–ú!
    """
    log.info("=== [–ë–û–¢] –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –•–ï–®–ê (–¥–ª—è /debug_hash) ===")
    log.info("[–ë–û–¢] –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ make_tg_hash: %s", data)

    data_for_hash = {k: v for k, v in data.items() if k != 'hash'}

    parts = []
    log.info("--- [–ë–û–¢] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–∞–º) ---")

    sorted_keys_log = ", ".join(sorted(data_for_hash.keys()))
    log.info("[–ë–û–¢] –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: %s", sorted_keys_log)

    for key in sorted(data_for_hash.keys()):
        value = data_for_hash[key]

        if isinstance(value, bool):
            value = str(value).lower()
        elif value is not None:
            value = str(value)

        if value is not None:
            log.info("[–ë–û–¢] –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—Ç—Ä–æ–∫–µ: '%s' = '%s'", key, value)
            parts.append(f"{key}={value}")
        else:
            log.warning("[–ë–û–¢] –ü–†–û–ü–£–©–ï–ù–û –ø–æ–ª–µ '%s' (None)", key)

    data_check_string = "\n".join(parts)
    log.info("--- [–ë–û–¢] –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è ---\n%s\n---", data_check_string)

    log.info("[–ë–û–¢] –î–ª–∏–Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–±–∞–π—Ç—ã, utf-8): %d", len(data_check_string.encode('utf-8')))


    log.info("--- [–ë–û–¢] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ ---")
    log.info("[–ë–û–¢] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å: '%s...'", TOKEN[:12])

    secret_key = hmac.new(
        key=TOKEN.encode('utf-8'),
        msg=b"WebAppData",
        digestmod=hashlib.sha256
    ).digest()
    log.info("[–ë–û–¢] –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á (hex): %s", secret_key.hex())

    log.info("--- [–ë–û–¢] –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞ ---")
    calculated_hash = hmac.new(
        secret_key,
        data_check_string.encode('utf-8'),
        hashlib.sha256
    ).hexdigest()

    log.info("[–ë–û–¢] –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ö–µ—à: %s", calculated_hash)
    log.info("=== [–ë–û–¢] –ö–û–ù–ï–¶ –°–û–ó–î–ê–ù–ò–Ø –•–ï–®–ê ===")
    return calculated_hash


async def make_api_request(endpoint: str, payload: dict, headers: Optional[dict] = None) -> Optional[dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    log.info("=== [–ë–û–¢] API –ó–ê–ü–†–û–° ===")
    log.info("Endpoint: %s", endpoint)
    log.info("Payload: %s", payload)

    try:
        async with httpx.AsyncClient(base_url=API_BASE, timeout=30) as client:
            response = await client.post(endpoint, json=payload, headers=headers or {})

            log.info("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: %d", response.status_code)
            log.info("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: %s", response.text)

            response.raise_for_status()
            result = response.json() if response.content else None
            log.info("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: %s", result)
            return result

    except httpx.HTTPStatusError as e:
        log.error("HTTP –æ—à–∏–±–∫–∞ %s –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ %s", e.response.status_code, endpoint)
        log.error("–¢–µ–ª–æ –æ—à–∏–±–∫–∏: %s", e.response.text)
        return None
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ %s: %s", endpoint, e)
        return None


@dp.message(F.text == "/start")
async def start_handler(msg: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user = msg.from_user
    if not user:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    log.info("=== [–ë–û–¢] –û–ë–†–ê–ë–û–¢–ö–ê /start ===")
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=%s, username=%s", user.id, user.username)


    caption = (
        "‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–ó–µ—Ä–∫–∞–ª–æ –°—É–¥—å–±—ã¬ª!</b>\n\n"
        "üîÆ –ó–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥—ë—à—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ –≤–æ–ª–Ω—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏!\n\n"
        "üì± –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
    )

    try:
        if PHOTO_PATH.exists():
            await msg.answer_photo(
                FSInputFile(PHOTO_PATH),
                caption=caption,

            )
        else:
            await msg.answer(
                caption,

            )
        log.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ WebApp –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", user.id)
    except TelegramBadRequest as e:
        log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %s", e)
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ WebApp. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        log.exception("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ start_handler: %s", e)
        await msg.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text == "/help")
async def help_handler(msg: types.Message) -> None:
    help_text = (
        "üîÆ <b>–ó–µ—Ä–∫–∞–ª–æ –°—É–¥—å–±—ã - –ü–æ–º–æ—â—å</b>\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/debug_hash - –û—Ç–ª–∞–¥–∫–∞ —Ö–µ—à–∞ (–≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)\n\n"
        "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Stars"
    )
    await msg.answer(help_text)


@dp.message(F.text.startswith("/debug_hash"))
async def debug_hash_handler(msg: types.Message) -> None:
    if not msg.from_user:
        return

    log.info("=== [–ë–û–¢] DEBUG HASH –ö–û–ú–ê–ù–î–ê –ó–ê–ü–£–©–ï–ù–ê ===")
    user = msg.from_user

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—è 'user' - –≤–∫–ª—é—á–∞–µ–º –í–°–ï –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è Telegram User.
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º getattr —Å None –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å AttributeError, –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ—Ç.
    user_data_dict = {
        "id": getattr(user, 'id', None),
        "is_bot": getattr(user, 'is_bot', None),
        "first_name": getattr(user, 'first_name', None),
        "last_name": getattr(user, 'last_name', None),
        "username": getattr(user, 'username', None),
        "language_code": getattr(user, 'language_code', None),
        "is_premium": getattr(user, 'is_premium', None),
        "added_to_attachment_menu": getattr(user, 'added_to_attachment_menu', None),
        "allows_write_to_pm": getattr(user, 'allows_write_to_pm', None),
        "photo_url": getattr(user, 'photo_url', None),
    }

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ None.
    # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –±—É–ª–µ–≤—ã –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ False, –ù–û —ç—Ç–æ –ù–ï is_bot (is_bot:false –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å).
    final_user_data_for_json = {}
    for k, v in user_data_dict.items():
        if v is None:
            continue
        # –ï—Å–ª–∏ –ø–æ–ª–µ –±—É–ª–µ–≤–æ –∏ –æ–Ω–æ False, –∏ —ç—Ç–æ –Ω–µ 'is_bot', —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.
        # Telegram –æ–ø—É—Å–∫–∞–µ—Ç false –±—É–ª–µ–≤—ã –ø–æ–ª—è –≤ initData, –∫—Ä–æ–º–µ is_bot.
        if isinstance(v, bool) and v is False and k != 'is_bot':
            continue
        final_user_data_for_json[k] = v


    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Ä—É—á–Ω—É—é —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º '/' –Ω–∞ '\/' –≤ photo_url, –µ—Å–ª–∏ Telegram —Ç–∞–∫ –¥–µ–ª–∞–µ—Ç.
    if 'photo_url' in final_user_data_for_json and final_user_data_for_json['photo_url']:
        if '\\/' not in final_user_data_for_json['photo_url']:
            final_user_data_for_json['photo_url'] = final_user_data_for_json['photo_url'].replace('/', '\\/')
            log.info("[–ë–û–¢] photo_url —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è HMAC: %s", final_user_data_for_json['photo_url'])


    # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º dict –≤ JSON-—Å—Ç—Ä–æ–∫—É
    user_json_str = json.dumps(final_user_data_for_json, separators=(',', ':'), ensure_ascii=False)
    log.info("[–ë–û–¢] –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è user_json_str (–±–µ–∑ URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è): %s", user_json_str)

    # URL-–∫–æ–¥–∏—Ä—É–µ–º —ç—Ç—É JSON-—Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º, –Ω–æ –Ω–µ –∫–æ–¥–∏—Ä—É–µ–º —Å–ª–µ—à–∏ (/)
    # quote(..., safe='/') —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—é Telegram –¥–ª—è URL –≤–Ω—É—Ç—Ä–∏ user-–ø–æ–ª—è.
    user_value_for_init_data = quote(user_json_str, safe='/')
    log.info("[–ë–û–¢] URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è user_value_for_init_data: %s", user_value_for_init_data)

    # –¢–µ–ø–µ—Ä—å test_data_to_hash –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–º –ø–∞—Ä—Å–∏–Ω–≥ initData
    test_data_to_hash = {
        "user": user_value_for_init_data,
        "auth_date": str(int(time.time())),
        "query_id": f"debug_{uuid.uuid4()}",
    }

    log.info("[–ë–û–¢] –î–∞–Ω–Ω—ã–µ –¥–ª—è make_tg_hash (–±–µ–∑ 'hash'): %s", {k: v for k, v in test_data_to_hash.items() if k != 'hash'})


    # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å –ø–æ–º–æ—â—å—é make_tg_hash
    calculated_hash = make_tg_hash(test_data_to_hash.copy())
    test_data_to_hash["hash"] = calculated_hash

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    response_text = (
        f"üîç <b>–û—Ç–ª–∞–¥–∫–∞ —Ö–µ—à–∞ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞)</b>\n\n"
        f"–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω –±–æ—Ç.\n\n"
        f"<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à–µ–º:</b>\n<code>{calculated_hash}</code>\n\n"
        f"<b>–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n"
        f"<pre>{json.dumps(test_data_to_hash, indent=2, ensure_ascii=False)}</pre>"
    )

    await msg.answer(response_text)
    log.info("=== [–ë–û–¢] DEBUG HASH –ö–û–ú–ê–ù–î–ê –í–´–ü–û–õ–ù–ï–ù–ê ===")


@dp.pre_checkout_query()
async def pre_checkout(pcq: types.PreCheckoutQuery) -> None:
    log.info("=== [–ë–û–¢] PRE-CHECKOUT QUERY ===")
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s, –°—É–º–º–∞: %s %s", pcq.from_user.id, pcq.total_amount, pcq.currency)

    if pcq.currency != "XTR":
        await bot.answer_pre_checkout_query(
            pcq.id, ok=False, error_message="–¢–æ–ª—å–∫–æ Telegram Stars"
        )
        return

    await bot.answer_pre_checkout_query(pcq.id, ok=True)


@dp.message(F.successful_payment)
async def successful_payment(msg: types.Message) -> None:
    if not msg.successful_payment or not msg.from_user:
        return

    sp = msg.successful_payment
    log.info("=== [–ë–û–¢] –£–°–ü–ï–®–ù–´–ô –ü–õ–ê–¢–ï–ñ ===")
    log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s, –°—É–º–º–∞: %s %s", msg.from_user.id, sp.total_amount, sp.currency)

    webhook_data = {
        "message": {
            "successful_payment": {
                "currency": sp.currency,
                "total_amount": sp.total_amount,
                "invoice_payload": sp.invoice_payload,
                "telegram_payment_charge_id": sp.telegram_payment_charge_id,
                "provider_payment_charge_id": sp.provider_payment_charge_id,
            }
        },
        "user_id": msg.from_user.id,
        "username": msg.from_user.username or "",
        "timestamp": int(time.time()),
    }

    webhook_result = await make_api_request("/api/payments/webhook", webhook_data)
    if webhook_result is None:
        await msg.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    return

    await msg.answer(f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\nüí∞ –°—É–º–º–∞: {sp.total_amount} {sp.currency}")


@dp.message()
async def unknown_message(msg: types.Message) -> None:
    await msg.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.")


async def main() -> None:
    log.info("=== [–ë–û–¢] –ó–ê–ü–£–°–ö –ü–û–õ–õ–ò–ù–ì–ê ===")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        log.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞: %s", e, exc_info=True)
        raise


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("=== [–ë–û–¢] –û–°–¢–ê–ù–û–í–õ–ï–ù –í–†–£–ß–ù–£–Æ ===")
    except Exception as e:
        log.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: %s", e, exc_info=True)
        sys.exit(1)
