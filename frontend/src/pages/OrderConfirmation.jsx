import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import toast from "react-hot-toast";

import { fetchOrder, payWithRubles } from "../api/orders";
// üëá –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
import { getStarsInvoice } from "../api/payments";
import { fetchMessages } from "../api/chat";
import { pollOrderStatus } from "../utils/polling";

import styles from "./OrderConfirmation.module.css";

/* –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –∫—É—Ä—Å: 1 ‚≠ê ‚âà 2.015 ‚ÇΩ */
const STAR_RATE = 2.015;

export default function OrderConfirmationPage() {
  const { orderId } = useParams();
  const navigate = useNavigate();

  const [order, setOrder] = useState(null);
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showPay, setShowPay] = useState(false);
  const [processing, setProc] = useState(false);

  /* ‚îÄ‚îÄ‚îÄ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–∞ + –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ ‚îÄ‚îÄ‚îÄ */
  useEffect(() => {
    load();
  }, [orderId]);

  async function load() {
    setLoading(true);
    try {
      const ord = await fetchOrder(orderId);
      const chat = await fetchMessages(orderId);
      setOrder(ord);
      setMessages(chat);
    } catch (err) {
      console.error(err);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ —á–∞—Ç");
    } finally {
      setLoading(false);
    }
  }

  /* ‚îÄ‚îÄ‚îÄ helper: –≤ —á–∞—Ç ‚îÄ‚îÄ‚îÄ */
  function goChat(id = orderId) {
    navigate(`/messages/${id}`, { state: { initialMessages: messages } });
  }

  /**
   * ‚úÖ Helper, –∫–æ—Ç–æ—Ä—ã–π –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É.
   */
  const waitForPaymentAndUpdate = async (orderId) => {
    toast.loading("–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã...");
    const isPaid = await pollOrderStatus(orderId);
    toast.dismiss();

    if (isPaid) {
      await load();
    }
    setProc(false);
  };

  /* ‚îÄ‚îÄ‚îÄ –æ–ø–ª–∞—Ç–∞ –∑–≤—ë–∑–¥–∞–º–∏ ‚îÄ‚îÄ‚îÄ */
  async function handleStars() {
    if (!order || processing) return;
    setProc(true);

    try {
      // ‚úÖ –£–ë–†–ê–ù–ê –õ–ò–®–ù–Ø–Ø –õ–û–ì–ò–ö–ê.
      // –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–æ–º.
      const { order_id, invoice } = await getStarsInvoice(order.id);

      if (!invoice) throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Å—á—ë—Ç");

      (window.Telegram?.WebApp?.openInvoice || window.open)(
        invoice,
        "_blank",
        "noopener,noreferrer",
      );

      await waitForPaymentAndUpdate(order_id);
    } catch (err) {
      console.error(err);
      toast.error(err.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–≤–µ–∑–¥–æ–π");
      setProc(false);
    }
  }

  /* ‚îÄ‚îÄ‚îÄ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π (Frikassa) ‚îÄ‚îÄ‚îÄ */
  async function handleRubles() {
    if (!order || processing) return;
    setProc(true);

    try {
      const { payment_url } = await payWithRubles(order.id);
      window.open(payment_url, "_blank", "noopener,noreferrer");
      await waitForPaymentAndUpdate(order.id);
    } catch (err) {
      console.error(err);
      toast.error(err.message || "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π");
      setProc(false);
    }
  }

  /* ‚îÄ‚îÄ‚îÄ —Ä–µ–Ω–¥–µ—Ä ‚îÄ‚îÄ‚îÄ */
  if (loading) return <div className={styles.placeholder}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;
  if (!order) return <div className={styles.placeholder}>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

  const starsPrice = Math.ceil(order.product.price / STAR_RATE);

  return (
    <div className={styles.container}>
      <h1>–í–∞—à –∑–∞–∫–∞–∑ #{order.id}</h1>
      <p>
        <strong>–°—Ç–∞—Ç—É—Å:</strong>&nbsp;{order.status}
      </p>

      {order.status === "pending" ? (
        !showPay ? (
          <button className={styles.payButton} onClick={() => setShowPay(true)}>
            –û–ø–ª–∞—Ç–∏—Ç—å
          </button>
        ) : (
          <div className={styles.buttons}>
            <button
              className={styles.starsBtn}
              disabled={processing}
              onClick={handleStars}
            >
              ‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {starsPrice} ‚≠ê
            </button>
            <button
              className={styles.rublesBtn}
              disabled={processing}
              onClick={handleRubles}
            >
              ‚ÇΩ –û–ø–ª–∞—Ç–∏—Ç—å {order.product.price} ‚ÇΩ
            </button>
            <button
              className={styles.cancelBtn}
              onClick={() => setShowPay(false)}
            >
              –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          </div>
        )
      ) : (
        <button className={styles.chatBtn} onClick={() => goChat(order.id)}>
          –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
        </button>
      )}
    </div>
  );
}
