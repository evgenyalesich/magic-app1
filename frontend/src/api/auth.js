import api from "./index";
import { useQuery } from "@tanstack/react-query";

/**
 * –õ–æ–≥–∏–Ω —á–µ—Ä–µ–∑ Telegram WebApp.
 * @param {string} rawInitData ‚Äî –Ω–µ–∏–∑–º–µ–Ω—ë–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "k1=v1&‚Ä¶&hash=‚Ä¶"
 * @returns {Promise<any>}
 */
export function loginWithTelegram(rawInitData) {
  console.log("üì§ [auth.js] –û—Ç–ø—Ä–∞–≤–∫–∞ init_data –≤ login:", rawInitData); // üëà LOG

  return api
    .post("/auth/login", { init_data: rawInitData })
    .then((res) => {
      console.log("‚úÖ [auth.js] –û—Ç–≤–µ—Ç login:", res.data); // üëà LOG
      return res.data;
    })
    .catch((err) => {
      console.error("‚ùå [auth.js] –û—à–∏–±–∫–∞ login:", err?.response?.data || err); // üëà LOG
      throw err;
    });
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ü—Ä–∏ 401 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null.
 */
export async function fetchMe() {
  try {
    const { data } = await api.get("/auth/me");
    console.log("üë§ [auth.js] fetchMe ‚Äî –ø—Ä–æ—Ñ–∏–ª—å:", data); // üëà LOG
    return data;
  } catch (err) {
    if (err.response?.status === 401) {
      console.warn("‚ö†Ô∏è [auth.js] fetchMe ‚Äî –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"); // üëà LOG
      return null;
    }
    console.error("‚ùå [auth.js] fetchMe ‚Äî –æ—à–∏–±–∫–∞:", err?.response?.data || err); // üëà LOG
    throw err;
  }
}

/**
 * –•—É–∫ react-query –¥–ª—è /auth/me
 */
export function useMe() {
  return useQuery({
    queryKey: ["me"],
    queryFn: fetchMe,
    retry: false,
    refetchOnWindowFocus: false,
    staleTime: 60_000,
  });
}
