import React, { useEffect, useState } from "react";
import {
  BrowserRouter,
  Routes,
  Route,
  Navigate,
  useNavigate,
  Link,
} from "react-router-dom";
// üëá –ò–ú–ü–û–†–¢–ò–†–£–ï–ú useQueryClient –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–≠–®–ï–ú
import {
  QueryClient,
  QueryClientProvider,
  useQueryClient,
} from "@tanstack/react-query";

import { useMe } from "./api/auth";
import LoginPage from "./pages/LoginPage";
import CatalogPage from "./pages/CatalogPage";
import ChatListPage from "./pages/ChatListPage";
import ChatWindowPage from "./pages/ChatWindowPage";
import PaymentPage from "./pages/PaymentPage";
import StarsPaymentPage from "./pages/StarsPaymentPage";
import PurchaseHistoryPage from "./pages/PurchaseHistoryPage";
import OrderConfirmationPage from "./pages/OrderConfirmation";

/* ‚Äî‚Äî –ê–¥–º–∏–Ω–∫–∞ ‚Äî‚Äî */
import AdminLayout from "./pages/AdminLayout";
import AdminProductsPage from "./pages/admin/AdminProductsPage";
import NewProductPage from "./pages/admin/NewProductPage";
import AdminChatPage from "./pages/admin/AdminChatPage";
import AdminReportPage from "./pages/admin/AdminReportPage";
import AdminChatListPage from "./pages/admin/AdminChatList";

import SideMenu from "./components/SideMenu";

import styles from "./App.module.css";
import "./index.css";

function Shell() {
  const { data: me, isLoading } = useMe();
  const navigate = useNavigate();
  const [menuOpen, setMenuOpen] = useState(false);
  // üëá –ü–û–õ–£–ß–ê–ï–ú –î–û–°–¢–£–ü –ö –ö–õ–ò–ï–ù–¢–£ REACT QUERY
  const queryClient = useQueryClient();

  // ‚úÖ –≠–§–§–ï–ö–¢ –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ö–≠–®–ê –ü–†–ò –í–´–•–û–î–ï –ò–ó –°–ò–°–¢–ï–ú–´
  useEffect(() => {
    // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (!me), –º—ã –æ—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à.
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    // (—á–∞—Ç—ã, –ø–æ–∫—É–ø–∫–∏) –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ –∏ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —É—Ç–µ—á–∫–∏
    // –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏.
    if (!isLoading && !me) {
      queryClient.clear();
    }
  }, [me, isLoading, queryClient]);

  /* ‚Äî‚Äî –µ—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–∫—Ä—ã–ª /admin ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /admin/products ‚Äî‚Äî */
  useEffect(() => {
    if (!isLoading && me?.is_admin && window.location.pathname === "/admin") {
      navigate("products", { replace: true });
    }
  }, [me, isLoading, navigate]);

  if (isLoading) return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>;

  // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –ü–û–°–õ–ï —Ç–æ–≥–æ, –∫–∞–∫ –∫—ç—à –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω
  if (!me) return <Navigate to="/login" replace />;

  return (
    <div className={styles.shell}>
      <header className={styles.header}>
        <button
          className={styles.menuButton}
          onClick={() => setMenuOpen((o) => !o)}
          aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
        >
          ‚ò∞
        </button>
        <Link to="/" className={styles.logo}>
          üîÆ –ó–µ—Ä–∫–∞–ª–æ –°—É–¥—å–±—ã
        </Link>
        <div className={styles.controls}>
          {me.is_admin && (
            <Link to="/admin" className={styles.adminLink}>
              Admin
            </Link>
          )}
        </div>
      </header>

      <SideMenu open={menuOpen} onClose={() => setMenuOpen(false)} />

      <main className={styles.main} onClick={() => setMenuOpen(false)}>
        <Routes>
          {/* –∫–æ—Ä–µ–Ω—å ‚Üí –∫–∞—Ç–∞–ª–æ–≥ */}
          <Route path="/" element={<Navigate to="services" replace />} />

          {/* ‚Äî‚Äî –ø—É–±–ª–∏—á–Ω–∞—è —á–∞—Å—Ç—å ‚Äî‚Äî */}
          <Route path="services" element={<CatalogPage />} />

          {/* üëá –í–°–ï –ú–ê–†–®–†–£–¢–´, –°–í–Ø–ó–ê–ù–ù–´–ï –° –û–ü–õ–ê–¢–û–ô, –¢–ï–ü–ï–†–¨ –ó–î–ï–°–¨ */}
          <Route path="payments/:productId" element={<PaymentPage />} />
          <Route
            path="payments/stars/:productId"
            element={<StarsPaymentPage />}
          />
          <Route path="orders/:orderId" element={<OrderConfirmationPage />} />

          {/* ‚Äî‚Äî —á–∞—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏—è ‚Äî‚Äî */}
          <Route path="messages" element={<ChatListPage />} />
          <Route path="messages/:orderId" element={<ChatWindowPage />} />
          <Route path="purchases" element={<PurchaseHistoryPage />} />

          {/* ‚Äî‚Äî –∞–¥–º–∏–Ω–∫–∞ ‚Äî‚Äî */}
          {me.is_admin && (
            <Route path="admin/*" element={<AdminLayout />}>
              <Route index element={<Navigate to="products" replace />} />
              <Route path="products" element={<AdminProductsPage />} />
              <Route path="products/new" element={<NewProductPage />} />
              <Route path="messages" element={<AdminChatListPage />} />
              <Route path="messages/:orderId" element={<AdminChatPage />} />
              <Route path="report" element={<AdminReportPage />} />
            </Route>
          )}

          {/* –ª—é–±–æ–π –ø—Ä–æ—á–∏–π URL ‚Üí –≤ –∫–∞—Ç–∞–ª–æ–≥ */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </main>
    </div>
  );
}

function InitDataRedirector() {
  const { data: me, isLoading } = useMe();
  const navigate = useNavigate();

  useEffect(() => {
    if (isLoading) return;
    if (!me && window.Telegram?.WebApp?.initData) {
      navigate(
        `/login?initData=${encodeURIComponent(
          window.Telegram.WebApp.initData,
        )}`,
        { replace: true },
      );
    }
  }, [me, isLoading, navigate]);

  return null;
}

const queryClient = new QueryClient();

export default function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        <InitDataRedirector />
        <Routes>
          <Route path="/login" element={<LoginPage />} />
          {/* üëá –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: Shell –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã */}
          <Route path="/*" element={<Shell />} />
        </Routes>
      </BrowserRouter>
    </QueryClientProvider>
  );
}
