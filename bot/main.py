# bot/main.py
from __future__ import annotations

import asyncio
import json
import logging
import os
import sys

import httpx
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from dotenv import load_dotenv

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
log = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TOKEN           = os.getenv("TELEGRAM_BOT_TOKEN")
API_BASE        = os.getenv("BACKEND_API_BASE")         # https://api.example.com
FRONTEND_ORIGIN = os.getenv("FRONTEND_ORIGIN", API_BASE)

if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
if not API_BASE:
    raise RuntimeError("BACKEND_API_BASE –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ aiogram setup ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp  = Dispatcher()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê /start ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@dp.message(F.text == "/start")
async def start_handler(msg: types.Message) -> None:
    tg_id   = msg.from_user.id
    tg_name = msg.from_user.username or msg.from_user.first_name
    log.info("/start from %s (%s)", tg_id, tg_name)

    async with httpx.AsyncClient(base_url=API_BASE, timeout=10) as client:
        await client.post("/api/auth/bot-register",
                          json={"telegram_id": tg_id, "username": tg_name})
        await client.post("/api/auth/login",
                          json={"telegram_id": tg_id, "username": tg_name})

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÆ –í–æ–π—Ç–∏ –≤ –≤–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä",
                    web_app=WebAppInfo(url=FRONTEND_ORIGIN),
                )
            ]
        ]
    )
    await msg.answer(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=kb,
    )

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê pre-checkout (Stars) ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@dp.pre_checkout_query()          # type: ignore[attr-defined]
async def pre_checkout(pcq: types.PreCheckoutQuery) -> None:
    """Telegram –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∏–Ω–∞—á–µ –ø–ª–∞—Ç—ë–∂ –∑–∞–≤–∏—Å–Ω–µ—Ç."""
    await bot.answer_pre_checkout_query(
        pcq.id,
        ok=(pcq.currency == "XTR"),     # XTR = Telegram Stars
    )

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê successful_payment ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@dp.message(F.successful_payment)
async def successful_payment(msg: types.Message) -> None:
    sp = msg.successful_payment
    try:
        payload  = json.loads(sp.invoice_payload)
        order_id = payload.get("order_id")
    except (ValueError, AttributeError):
        order_id = None

    # ‚ñ∏ —É–≤–µ–¥–æ–º–ª—è–µ–º backend, —á—Ç–æ–±—ã –æ–Ω –ø–æ—Å—Ç–∞–≤–∏–ª status = paid
    update = {
        "message": {
            "successful_payment": {
                "currency": "XTR",
                "invoice_payload": sp.invoice_payload,
            }
        }
    }
    async with httpx.AsyncClient(base_url=API_BASE, timeout=10) as client:
        await client.post("/api/payments/webhook", json=update)

    # ‚ñ∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¥–∞—ë–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑¬ª
    if order_id:
        order_url = f"{FRONTEND_ORIGIN}/messages/{order_id}"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑",
                        web_app=WebAppInfo(url=order_url),
                    )
                ]
            ]
        )
        await msg.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b> —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–∫–∞–∑–∞.",
            reply_markup=kb,
        )
    else:
        await msg.answer("‚≠ê –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê main loop ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
async def main() -> None:
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        log.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
