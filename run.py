from __future__ import annotations

import logging
import os
import subprocess
import sys
import threading
import time
from pathlib import Path
from typing import Final

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  stdout ‚Üí UTF-8 (Windows)  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if hasattr(sys.stdout, "reconfigure"):  # Py 3.7+
    try:
        sys.stdout.reconfigure(encoding="utf-8", errors="replace")
    except Exception:  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        pass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()

_handler = logging.StreamHandler(stream=sys.stdout)
_handler.setFormatter(
    logging.Formatter(
        fmt="%(asctime)s [%(levelname)-8s] %(message)s",
        datefmt="%H:%M:%S",
    )
)
logging.basicConfig(level=LOG_LEVEL, handlers=[_handler])

log = logging.getLogger("runner")

ROOT: Final = Path(__file__).resolve().parent  # = project root


def _stream(proc: subprocess.Popen, prefix: str) -> None:
    """–ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π –ø–æ—Ç–æ–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –æ–±—â–∏–π –ª–æ–≥."""
    with proc.stdout:  # type: ignore[attr-defined]
        for raw in iter(proc.stdout.readline, b""):
            line = raw.decode(errors="replace").rstrip()
            if line:  # –ø—É—Å—Ç—ã–µ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º
                log.debug("[%s] %s", prefix, line)
    proc.stdout.close()  # type: ignore[attr-defined]


def _spawn(cmd: list[str], cwd: Path, prefix: str) -> subprocess.Popen:
    log.info("‚ñ∂Ô∏è  %s (cwd=%s)", " ".join(cmd), cwd)

    # –Ω–∞—Å–ª–µ–¥—É–µ–º —Ç–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ + –¥–æ–±–∞–≤–ª—è–µ–º/–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ
    env = os.environ.copy()
    env["PYTHONIOENCODING"] = "utf-8"

    proc = subprocess.Popen(
        cmd,
        cwd=cwd,
        env=env,  # ‚Üê –≤–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        bufsize=1,  # line-buffered
    )
    log.info("[%s] pid=%s", prefix, proc.pid)

    # –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    threading.Thread(
        target=_stream,
        args=(proc, prefix),
        daemon=True,
    ).start()
    return proc


def start_backend() -> subprocess.Popen:
    """
    –°—Ç–∞—Ä—Ç—É–µ–º Uvicorn –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞, —á—Ç–æ–±—ã import backend.*
    —Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ –ø–∞–∫–µ—Ç.  PYTHONPATH –Ω–µ —Ç—Ä–æ–≥–∞–µ–º ‚Äì –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ cwd –∏ backend.main:app.
    """
    return _spawn(
        ["uvicorn", "backend.main:app", "--reload", "--log-level", LOG_LEVEL.lower()],
        ROOT,  # <‚îÄ cwd = –∫–æ—Ä–µ–Ω—å!
        "backend",
    )


def start_bot() -> subprocess.Popen:
    return _spawn(
        ["python", "main.py"],
        ROOT / "bot",
        "bot",
    )


def wait(proc: subprocess.Popen, name: str) -> None:
    """–ë–ª–æ–∫–∏—Ä—É–µ–º—Å—è, –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    rc = proc.wait()
    if rc == 0:
        log.info("‚úÖ %s –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (exit-code 0)", name)
    else:
        log.warning("üí• %s —É—à—ë–ª —Å –∫–æ–¥–æ–º %s", name, rc)


def graceful_kill(proc: subprocess.Popen, name: str, timeout: int = 5) -> None:
    """SIGTERM ‚Üí –∂–¥—ë–º ‚Üí SIGKILL."""
    if proc.poll() is not None:
        return
    log.info("‚èπ  –ó–∞–≤–µ—Ä—à–∞—é %s ‚Ä¶", name)
    proc.terminate()
    try:
        proc.wait(timeout=timeout)
    except subprocess.TimeoutExpired:
        log.warning("‚õî %s –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ %ss ‚Üí kill", name, timeout)
        proc.kill()
        proc.wait()


def main() -> None:
    backend = start_backend()
    bot = start_bot()

    try:
        while True:
            if backend.poll() is not None or bot.poll() is not None:
                break
            time.sleep(0.5)
    except KeyboardInterrupt:
        log.info("üëã Ctrl-C ‚Äì –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë")

    graceful_kill(backend, "backend")
    graceful_kill(bot, "bot")

    # –¥–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ—Ç–æ–∫–æ–≤-—á–∏—Ç–∞–ª–æ–∫; –∏–Ω–∞—á–µ –≤ IDE –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç ¬´—Å—ä–µ—Å—Ç—å—Å—è¬ª
    time.sleep(0.2)
    log.info("üèÅ runner –∑–∞–≤–µ—Ä—à—ë–Ω")


if __name__ == "__main__":
    main()
