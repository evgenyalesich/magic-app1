import logging
from typing import Dict, Any

from fastapi import APIRouter, Depends, HTTPException, Response, Cookie
from sqlalchemy.ext.asyncio import AsyncSession

from backend.api.deps import db_session
from backend.services.crud import user_crud
from backend.schemas.user import UserCreate, UserSchema
from backend.core.config import settings
from backend.api.auth_utils import verify_telegram_auth, is_payload_fresh

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ ‚Äî –æ–Ω–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ main/api.py
router = APIRouter()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ ID –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
ADMIN_TELEGRAM_IDS = settings.ADMIN_TELEGRAM_IDS


@router.post("/login", response_model=UserSchema)
async def login(
    response: Response,
    payload: Dict[str, Any],
    db: AsyncSession = Depends(db_session),
):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Telegram Login Widget.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º hash –∏ —Å–≤–µ–∂–µ—Å—Ç—å payload, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞–≤–∏–º cookie.
    """
    logging.info("üîë –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram-payload: %s", payload)

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ hash
    if not verify_telegram_auth(payload):
        logging.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π hash –æ—Ç Telegram: %s", payload.get("hash"))
        raise HTTPException(400, "Invalid Telegram hash")

    # 2) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏
    if not is_payload_fresh(payload, window=300):
        logging.warning("‚ùå –£—Å—Ç–∞—Ä–µ–≤—à–∏–π auth_date: %s", payload.get("auth_date"))
        raise HTTPException(400, "Expired Telegram login")

    # 3) –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        tg_id = int(payload["id"])
        tg_username = payload.get("username", "")
    except (KeyError, ValueError):
        raise HTTPException(400, "Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    # 4) Upsert + is_admin
    user_in = UserCreate(telegram_id=tg_id, username=tg_username)
    existing = await user_crud.get_by_telegram_id(db, telegram_id=tg_id)
    if existing is None:
        is_admin = tg_id in ADMIN_TELEGRAM_IDS
        user_obj = await user_crud.create(
            db, obj_in=user_in, extra_fields={"is_admin": is_admin}
        )
        logging.info("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s", user_obj.username)
    else:
        user_obj = existing
        logging.info("üîÑ –£–∂–µ –≤ –ë–î: %s", user_obj.username)

    # 5) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cookie –¥–ª—è –∫—Ä–æ—Å—Å-—Å–∞–π—Ç–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∏–∑ WebApp
    response.set_cookie(
        key="tg_id",
        value=str(tg_id),
        httponly=True,
        secure=True,  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ HTTPS –¥–ª—è SameSite=None
        samesite="none",  # —á—Ç–æ–±—ã cookie —à–ª–∏ –∏–∑ iframe/WebView
        max_age=7 * 24 * 3600,
    )

    return user_obj


async def get_current_user(
    tg_id: str | None = Cookie(None, alias="tg_id"),
    db: AsyncSession = Depends(db_session),
) -> UserSchema:
    """
    –î–µ–ø–µ–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ cookie tg_id.
    """
    if tg_id is None:
        raise HTTPException(401, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    try:
        tg_id_val = int(tg_id)
    except ValueError:
        raise HTTPException(401, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π tg_id –≤ cookie")

    user = await user_crud.get_by_telegram_id(db, telegram_id=tg_id_val)
    if user is None:
        raise HTTPException(401, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return user


@router.get("/me", response_model=UserSchema)
async def read_own_profile(current_user: UserSchema = Depends(get_current_user)):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return current_user


@router.post("/bot-register", response_model=UserSchema)
async def bot_register(
    payload: Dict[str, Any],
    db: AsyncSession = Depends(db_session),
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –±–æ—Ç–∞: upsert –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ hash.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å telegram_id –∏ username.
    """
    tg_id = payload.get("telegram_id")
    if not tg_id:
        raise HTTPException(400, "telegram_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    user_obj = await user_crud.upsert(
        db,
        telegram_id=int(tg_id),
        username=payload.get("username", ""),
    )
    return user_obj
