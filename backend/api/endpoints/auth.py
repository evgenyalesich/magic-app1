# backend/api/endpoints/auth.py

import logging
from typing import Dict, Any

from fastapi import APIRouter, Depends, HTTPException, Request, Response
from sqlalchemy.ext.asyncio import AsyncSession

from backend.api.deps import get_current_user
from backend.services.crud import user_crud
from backend.schemas.user import UserCreate, UserSchema
from backend.core.config import settings
from backend.api.auth_utils import verify_telegram_auth, is_payload_fresh

router = APIRouter()
logger = logging.getLogger(__name__)

# –ë–µ—Ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω‚ÄêID
ADMIN_TELEGRAM_IDS = settings.ADMIN_TG_IDS


@router.post("/login", response_model=UserSchema)
async def login(
    request: Request,
    response: Response,
    payload: Dict[str, Any],  # –æ–∂–∏–¥–∞–µ–º JSON —Å Telegram‚Äê–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    db: AsyncSession = Depends(get_current_user),
):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è ¬´–ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram-WebApp¬ª. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—ã–ª–∞–µ—Ç
    Telegram Login Widget: id, username, auth_date, hash, ‚Ä¶.

    –ü—Ä–æ–≤–µ—Ä—è–µ–º:
      1) –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å hash (—á–µ—Ä–µ–∑ BOT_TOKEN);
      2) —á—Ç–æ auth_date ¬´—Å–≤–µ–∂–∏–π¬ª (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç);
      3) upsert –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –µ—Å–ª–∏ –µ—Å—Ç—å telegram_id ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º.
      4) –ü–∏—à–µ–º is_admin=True, –µ—Å–ª–∏ telegram_id –≤—Ö–æ–¥–∏—Ç –≤ ADMIN_TELEGRAM_IDS.

    –í –æ—Ç–≤–µ—Ç –∫–ª–∞–¥—ë–º —é–∑–µ—Ä–∞ –∏ —Å—Ç–∞–≤–∏–º cookie —Å `tg_id`.
    """

    logger.info("üîë –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ Telegram-payload: %s", payload)

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ hash –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω:
    if not verify_telegram_auth(payload):
        logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π hash –æ—Ç Telegram: %s", payload.get("hash"))
        raise HTTPException(status_code=400, detail="Invalid Telegram hash")

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ auth_date –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π (opt):
    if not is_payload_fresh(payload, window=300):
        logger.warning("‚ùå –£—Å—Ç–∞—Ä–µ–≤—à–∏–π auth_date: %s", payload.get("auth_date"))
        raise HTTPException(status_code=400, detail="Expired Telegram login")

    # 3) –ë–µ—Ä—ë–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã Pydantic-—Å—Ö–µ–º–µ UserCreate (telegram_id –∏ username)
    try:
        tg_id = int(payload["id"])
        tg_username = payload.get("username", "")
    except (KeyError, ValueError):
        raise HTTPException(status_code=400, detail="Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    user_in = UserCreate(telegram_id=tg_id, username=tg_username)

    # 4) –ò—â–µ–º –≤ –ë–î; –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º. –ü–æ–º–µ—á–∞–µ–º is_admin, –µ—Å–ª–∏ telegram_id –≤ ADMIN_TELEGRAM_IDS
    existing_user = await user_crud.get_by_telegram_id(db, telegram_id=tg_id)
    if not existing_user:
        is_admin_flag = tg_id in ADMIN_TELEGRAM_IDS
        # –ü–µ—Ä–µ–¥–∞—ë–º –≤ create() Pydantic-–º–æ–¥–µ–ª—å –∏ –¥–æ–ø.–ø–æ–ª–µ is_admin
        user_obj = await user_crud.create(
            db,
            obj_in=user_in,
            extra_fields={"is_admin": is_admin_flag},
        )
        logger.info("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: %s", user_obj.username)
    else:
        user_obj = existing_user
        logger.info("üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î: %s", user_obj.username)

    # 5) –°—Ç–∞–≤–∏–º cookie —Å telegram_id (—Ç–∏–ø ¬´–º—è–≥–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è¬ª)
    #    –ü–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Secure+HttpOnly+SameSite –æ–ø—Ü–∏–∏
    response.set_cookie(
        key="tg_id",
        value=str(tg_id),
        httponly=True,
        secure=False,  # –∏–ª–∏ True, –µ—Å–ª–∏ HTTPS
        samesite="lax",
        max_age=60 * 60 * 24 * 7,  # 7 –¥–Ω–µ–π
    )

    return user_obj


@router.get("/user/{telegram_id}", response_model=UserSchema)
async def get_user(telegram_id: int, db: AsyncSession = Depends(get_current_user)):
    logger.info("üìå –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID=%s", telegram_id)
    user = await user_crud.get_by_telegram_id(db, telegram_id=telegram_id)
    if not user:
        logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID=%s –Ω–µ –Ω–∞–π–¥–µ–Ω", telegram_id)
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user


async def get_current_user(
    tg_id_cookie: str = Request.cookies.get,  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ FastAPI –Ω–∞–π–¥—ë—Ç cookie tg_id
    db: AsyncSession = Depends(get_current_user),
) -> UserSchema:
    """
    –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    –±–µ—Ä—ë–º cookie 'tg_id', –∏—â–µ–º –≤ –ë–î. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî 401.
    """

    # –ï—Å–ª–∏ cookie –≤–æ–æ–±—â–µ –Ω–µ—Ç
    if not tg_id_cookie("tg_id"):
        raise HTTPException(status_code=401, detail="–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

    try:
        tg_id_val = int(tg_id_cookie("tg_id"))
    except ValueError:
        raise HTTPException(status_code=401, detail="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π tg_id –≤ cookie")

    user = await user_crud.get_by_telegram_id(db, telegram_id=tg_id_val)
    if not user:
        raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return user
